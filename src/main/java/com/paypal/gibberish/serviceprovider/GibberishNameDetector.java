/*
 * GibberishNameDetector
 *
 * Pass in a list of names and a Markov probability table
 * Returns names with positive score, negative score, final score, and 1/0 for pass/fail
 *
 * Depends on pre-built detector Markov chains
 *
 * Markov probability table includes:
 * - Threshold
 * - array of good probabilities
 * - array of bad probabilities
 * Generated by GibberishDetector.train goodProbability, badProbability Lists
 *
 * Final utils and flow:
 *
 * Create script-based probability markov chains
 *  - add negative lists markov chain builder based off CLDR keyboard maps and language
 *    - always include Latin-101 keyboard
 *    - add html, script, camelcase, .com names
 *  - add Collections writer to utils + threshold
 *  - add script detector module based off ICU UCD script in utils - script of line, throw out common
 *  - add alphabet builder, including accented chars
 *  - add probability value display to line check
 *  - auto-gibberish name is wrong punct in string, like email, html, script @ \w.\w http
 */
package com.paypal.gibberish.serviceprovider;
import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.paypal.gibberishdetector.GibberishDetector;
import com.paypal.gibberishdetector.GibberishDetectorExtended;
import com.paypal.gibberishdetector.GibberishDetectorFactory;

/**
 *
 * @author mimckenna, nutkur and skoshy
 */
public class GibberishNameDetector {
	static Logger logger = LoggerFactory.getLogger(GibberishNameDetector.class);
	static GibberishDetector gibberishDetector;
	public static ResultObject getResult(Double inputThreshold, List<String> names) {	
		
		ResultObject result = new ResultObject();
		if(names!= null && names.size()>0 ) {
			if(gibberishDetector == null) {
				GibberishDetectorFactory factory = new GibberishDetectorFactory(GibberishDetectorExtended.class);
				/*
				 * Build and train probability matrix
				 * Use default values based on Census data if not passed in args
				 */
				gibberishDetector = factory.createGibberishDetectorFromLocalFile2("en-training-data.txt",
						"en-good-names.txt", "badEnglish.txt", "en-alphabet.txt");
			}
			double threshold = inputThreshold != null ? inputThreshold.doubleValue() : gibberishDetector.threshold;
			result.setThreshold(gibberishDetector.getThreshold());
			List<NameObject> nameObjects = new ArrayList<NameObject>();
			for (String line : names) {
				double goodProb = (gibberishDetector.getProbability(line) - threshold) * gibberishDetector.weight;
				NameObject name = new NameObject();
				name.setGibberishScore(goodProb);
				name.setName(line);
				name.setGibberish(gibberishDetector.isGibberish(line));
				nameObjects.add(name);
			}
			result.setNames(nameObjects);
		} else {
			result.setNames(new ArrayList<NameObject>());
		}

		return(result);
	}
	public static ResultObject demo() {	
		String[] goodEnglishSentences = {
				"my name is Shir",
				"anderson",
				"boyd",
				"collins",
				"dudley-newson brenda",
				"edwards sandra",
				"ferguson vickie",
				"footman ursula",
				"gandy stacy",
				"hedgeman jerrika",
				"jenkins lanses",
				"lynom jackson beverly",
				"mcelhaney deaunna",
				"rainey renee",
				"billups wylie",
				"Moeneclaey",
				"Nazem",
				"Pagenkopf",
				"Zakarya",
				"Neha Utkur"
		};
		String[] badEnglishSentences = {
				"2 chhsdfitoixcv",
				"Wm the 3rd",
				"fasdf asg ggd fhgkv",
				"qmdu poebc vuutkl jsupwre",
				"asdf asdf",
				"sam123",
				"mike@paypal.com",
				"http://unicode.org",
				"AAAAEEEESSSS",
				"AABCDEFGH",
				"JP",
				"GIJOE",
				"Mike.McKenna657",
				"eeeeeeeeeeeee",
				"Jane 8 Tau",
				"GIHOHOSD",
				"KAPTNBLAUBR",
				"KARLHEINZBHM",
				"GIJANE",
				"ZLATKO",
				"ÈIHÁÈKOVÁ DØÍMALOVÁ",
				"ŠŹOVÍÈKOVÁ ŠIMÁKOVÁ",
				"hjkhjkhjk",
				"qwerty",
				"asdfghjk",
				"zxcvbnm",
				"$$$$$$$",
				"nosdt in salwelawe",
				"☃☃☃☃",
				"Texin", "Ute", "May", "Stu", "Rex", "aeioaueioaueaoiaeuaau"

		};

		String alphabet = " 0123456789!\"#&'()*,-./:;?@[]abcdefghijklmnopqrstuvwxyz\u00e8\u00A7\u00E0\u00E1\u00E2\u00E3\u00E4\u00E5\u00E6\u00E7\u00E8\u00E8\u00E9\u00EA\u00EB\u00EC\u00ED\u00EE\u00EF\u00F1\u00F2\u00F3\u00F4\u00F6\u00F8\u00F9\u00FA\u00FB\u00FC\u00FF\u0101\u0103\u0113\u0115\u012B\u012D\u014D\u014F\u0153\u016B\u016D\u2010\u2013\u2014\u2018\u2019\u201C\u201D\u2020\u2021\u2026\u2032\u2033\u0300";

		if(gibberishDetector == null) {
			GibberishDetectorFactory factory = new GibberishDetectorFactory(GibberishDetectorExtended.class);
			/*
			 * Build and train probability matrix
			 * Use default values based on Census data if not passed in args
			 */
			gibberishDetector = factory.createGibberishDetectorFromLocalFile2("en-training-data.txt",
					"en-good-names.txt", "badEnglish.txt", "en-alphabet.txt");
		}
		ResultObject result = new ResultObject();
		result.setThreshold(gibberishDetector.threshold);
		List<NameObject> nameObjects = new ArrayList<NameObject>();
		logger.info("------------");
		logger.info("Test lines");
		System.out.printf("alphabet: ", alphabet);
		logger.info("------------");

		for (String line : goodEnglishSentences) {
			double goodProb = (gibberishDetector.getProbability(line) - gibberishDetector.threshold) * gibberishDetector.weight;
			double finalGibberish = goodProb ;//- negProb/2;
			NameObject name = new NameObject();
			name.setGibberishScore(goodProb);
			name.setName(line);
			name.setGibberish(gibberishDetector.isGibberish(line));
			nameObjects.add(name);
			logger.info("Gibberish: "+
					(finalGibberish < 0 ? "TRUE  :" : "false : ")+
					finalGibberish+" : " + line);
			logger.info("     Pos: "+
					(gibberishDetector.isGibberish(line)? "yes" : "no ")+" : " + goodProb);
		}

		logger.info("------------");
		logger.info("Test bad lines"); // Display the string.
		logger.info("------------");

		for (String line : badEnglishSentences) {
			double goodProb = (gibberishDetector.getProbability(line) - gibberishDetector.threshold) * gibberishDetector.weight;
			NameObject name = new NameObject();
			name.setGibberishScore(goodProb);
			name.setName(line);
			name.setGibberish(gibberishDetector.isGibberish(line));
			nameObjects.add(name);
			logger.info("Gibberish: "+
					(goodProb < 0 ? "TRUE  :" : "false : ")+
					goodProb+" : " + line);
			logger.info("     Pos: "+
					(gibberishDetector.isGibberish(line)? "yes" : "no ")+" : " + goodProb);

		}
		result.setNames(nameObjects);
		return result;
	}

}
